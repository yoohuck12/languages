runtime vimrc_example.vim
let &runtimepath.=',/root/.vim/'
set rtp+=~/.fzf

" -----pathogen----- "
call pathogen#infect('/root/.vim/bundle/{}')
call pathogen#helptags()

"
filetype plugin on
"
"===============================================================================
"==========  CUSTOMIZATION (vimrc)  ============================================
"===============================================================================
"

"-------------------------------------------------------------------------------
" Use of dictionaries
"-------------------------------------------------------------------------------
"
set complete+=k           " scan the files given with the 'dictionary' option
"
"-------------------------------------------------------------------------------
" Various settings
"-------------------------------------------------------------------------------
"
set mouse=c
set colorcolumn=72
autocmd FileType python setlocal colorcolumn=88
set autoread              " read open files again when changed outside Vim
set autowrite             " write a modified buffer on each :next , ...
set browsedir  =current   " which directory to use for the file browser
set incsearch             " use incremental search
set shiftwidth =4         " number of spaces to use for each step of indent
set tabstop    =4         " number of spaces that a <Tab> in the file counts for
set visualbell            " visual bell instead of beeping
set number                                " line number, add ummae
set title                                    " add ummae
set ts=4
set expandtab
set autoindent
set cindent
set wrap
set smarttab
set ignorecase
set smartcase
set history=500
set belloff=all
syntax on


"-------------------------------------------------------------------------------
" Change the working directory to the directory containing the current file
"-------------------------------------------------------------------------------
if has("autocmd")
  autocmd BufEnter * :lchdir %:p:h
endif " has("autocmd")
"
"-------------------------------------------------------------------------------
" Filename completion
"
"   wildmenu : command-line completion operates in an enhanced mode
" wildignore : A file that matches with one of these
"              patterns is ignored when completing file or directory names.
"-------------------------------------------------------------------------------
"
set wildmenu
set wildignore=*.bak,*.o,*.e,*~
"
"-------------------------------------------------------------------------------
" print options  (pc = percentage of the media size)
"-------------------------------------------------------------------------------
set printoptions=left:8pc,right:3pc
"
"-------------------------------------------------------------------------------
" taglist.vim : toggle the taglist window
" taglist.vim : define the title texts for make
" taglist.vim : define the title texts for qmake
"-------------------------------------------------------------------------------
" noremap <silent> <F7> :TlistUpdate<CR>
 noremap <silent> <F8> :Tlist<CR>
 noremap <silent> <F9> :TlistSync<CR>
 noremap <silent> <F11>  <Esc><Esc>:Tlist<CR>
inoremap <silent> <F11>  <Esc><Esc>:Tlist<CR>

let tlist_make_settings  = 'make;m:makros;t:targets'
let tlist_qmake_settings = 'qmake;t:SystemVariables'

if has("autocmd")
  " ----------  qmake : set filetype for *.pro  ----------
  autocmd BufNewFile,BufRead *.pro  set filetype=qmake
endif " has("autocmd")

set backupdir=/daum/tmp


" ----c---- "
" use NUL instead /dev/null in Windows
autocmd FileType c setlocal formatprg=indent\ -kr\ --no-tabs\ 2>\ /dev/null
autocmd FileType cpp setlocal formatprg=indent\ -kr\ --no-tabs\ 2>\ /dev/null
"set cinoptions=>4,n-2,{2,^-2,:2,=2,g0,h2,p5,t0,+2,(0,u0,w1,m1
if has("autocmd")
    autocmd FileType c map <buffer> <F7> gggqG
    autocmd FileType cpp map <buffer> <F7> gggqG
endif

" -----python-mode----- "
set foldlevel=99
let g:pymode_options_colorcolumn = 0
let g:pymode_lint_ignore = "E501,E402"
let g:pymode_python = "python3"

" ------nerd----- "
syntax on
syntax enable


" -----plug----- "
call plug#begin('~/.vim/plugged')
Plug 'Konfekt/FastFold',                { 'tag': '5.0' }
Plug 'scrooloose/nerdtree',             { 'tag': '5.0.0' }
Plug 'vim-scripts/taglist.vim',         { 'tag': '4.5' }
Plug 'SirVer/ultisnips',                { 'tag': '3.1' }
Plug 'honza/vim-snippets',              { 'commit': '1ba4a66c11d8fd4309656bc2994d683580d54de3' }
Plug 'vim-airline/vim-airline',         { 'tag': 'v0.10' }
Plug 'junegunn/fzf',                    { 'tag': '0.18.0', 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim',                { 'commit': 'b31512e2a2d062ee4b6eb38864594c83f1ad2c2f' }
Plug 'tpope/vim-surround',              { 'tag': 'v2.1' }
Plug 'aldantas/vim-custom-surround',    { 'tag': '1.1' }
Plug 'k0kubun/vim-open-github',         { 'commit': '3a7c7e0b4aa89fa51b4c1fb20c93eb92a375acd3' }
Plug 'ntpeters/vim-better-whitespace',  { 'commit' : '8cf4b2175dd61416c2fe7d3234324a6c59d678de' }
" Plug 'neoclide/coc.nvim', {'branch': 'release'}

Plug 'jlanzarotta/bufexplorer'
"Plug 'valloric/youcompleteme'
Plug 'airblade/vim-gitgutter',
Plug 'altercation/vim-colors-solarized'
Plug '/root/.vim/plug_manually_installed/gtags'
call plug#end()

set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
Plugin 'valloric/youcompleteme'
Plugin 'nvie/vim-flake8'
call vundle#end()

" vim-flake8
autocmd FileType python map <buffer> <F3> :call Flake8()<CR>
let g:flake8_show_in_file=1   " show
let g:flake8_max_markers=500  " maximum # of markers to show(500 is default)
source ~/.vim/bundle/vim-flake8/ftplugin/python_flake8.vim
let g:syntastic_python_flake8_config_file='~/.flake8'

" --- git -----
function Blame() range
    execute '!git blame -L ' . a:firstline . ',' . a:lastline . ' %'
endfunction
vnoremap b :call Blame()<CR>

" -----quickr----- "
"set csprg=/usr/local/bin/cscope
"set csto=1
"set cst
"set nocsverb
"
"if filereadable("./cscope.out")
"cs add cscope.out
"else
"cs add /home/work/trunk/cscope.out
"endif
"
"set csverb
"let g:quickr_cscope_keymaps = 0
"nmap <Leader>s <plug>(quickr_cscope_symbols)
"nmap <Leader>c <plug>(quickr_cscope_callers)

" -----gitgutter----- "
function! GitStatus()
  let [a,m,r] = GitGutterGetHunkSummary()
  return printf('+%d ~%d -%d', a, m, r)
endfunction
set statusline+=%{GitStatus()}
let g:gitgutter_preview_win_floating = 1
let g:gitgutter_highlight_lines = 1
let g:gitgutter_use_location_list = 1
let g:gitgutter_highlight_linenrs = 1

nmap <C-h> :GitGutterPreviewHunk<CR>
nmap <C-d> :GitGutterDiffOrig<CR>


" -----pydocstring----- "
autocmd FileType python setlocal softtabstop=4

" -----cscope-gtags----- "
if has("cscope")
    set csprg=gtags-cscope
    function! LoadGtagsCscope()
        let db = findfile("GTAGS", ".;")
        if (!empty(db))
            try
                if db == "/GTAGS"
                    let path = "/"
                elseif db == "GTAGS"
                    let path = getcwd()
                else
                    let path = strpart(db, 0, match(db, "/GTAGS$"))
                endif
                set nocscopeverbose
                exe "cs add " . db . " " . path . " -a"
                set cscopeverbose
            catch
            endtry
        elseif $CSCOPE_DB != ""
            cs add $CSCOPE_DB
        endif
    endfunction
    au BufEnter * call LoadGtagsCscope()
    set cscopetag

    nmap <C-\>s :cs find s <C-R>=expand("<cword>")<CR><CR>
    nmap <C-\>g :cs find g <C-R>=expand("<cword>")<CR><CR>
    nmap <C-\>c :cs find c <C-R>=expand("<cword>")<CR><CR>
    nmap <C-\>t :cs find t <C-R>=expand("<cword>")<CR><CR>
    nmap <C-\>e :cs find e <C-R>=expand("<cword>")<CR><CR>
    nmap <C-\>f :cs find f <C-R>=expand("<cfile>")<CR><CR>
    nmap <C-\>i :cs find i ^<C-R>=expand("<cfile>")<CR>$<CR>
    nmap <C-\>d :cs find d <C-R>=expand("<cword>")<CR><CR>
endif

" -----coc-nvim---- "
let $COC_VIMRC = '~/.vim/plugged/coc.nvim/plugin/coc.vimrc'
if filereadable($COC_VIMRC)
    source $COC_VIMRC
    noremap <silent> <F6>  :Format<CR>
endif

" -----load user vim configs----- "
try
    source ~/.users/$USER_NAME/vim_configs.vim
catch
endtry

" NERD Commenter
map <F6> :NERDTreeToggle<cr>
" Add spaces after comment delimiters by default
let g:NERDSpaceDelims = 1
" Use compact syntax for prettified multi-line comments
let g:NERDCompactSexyComs = 1
" Align line-wise comment delimiters flush left instead of following code indentation
let g:NERDDefaultAlign = 'left'
" Set a language to use its alternate delimiters by default
let g:NERDAltDelims_java = 1
" Add your own custom formats or override the defaults
let g:NERDCustomDelimiters = { 'c': { 'left': '#','right': '' } }
" Allow commenting and inverting empty lines (useful when commenting a region)
let g:NERDCommentEmptyLines = 1
" Enable trimming of trailing whitespace when uncommenting
let g:NERDTrimTrailingWhitespace = 1

set background=dark
let g:solarized_termcolors=256
let g:solarized_termtrans=1
colorscheme solarized
"colorscheme asmanian2

" ----- youcompleteme ------ "
let g:ycm_server_python_interpreter='/usr/local/bin/python3'
"let g:ycm_server_python_interpreter='/Users/kakao/miniconda3/bin/python'
let g:ycm_global_ycm_extra_conf = '~/.vim/bundle/youcompleteme/.ycm_extra_conf.py'

nmap <C-g> :YcmCompleter GoTo<CR>
nmap <C-t> :YcmCompleter GoToReferences<CR>
" nnoremap gg :YcmCompleter GoToImprecise
nmap <C-d> :YcmCompleter GoToDeclaration<CR>
" nmap <C-t> :YcmCompleter GetType<CR>

" ----- youcompleteme ------ "
map <F2> :BufExplorer<CR>

" fzf
nmap <C-a> :Ag<CR>
nmap <C-i> :Files<CR>

" ctags 
" ctags -R --fields=+l --languages=python --python-kinds=-iv -f tags ./
set tags=~/git/dpp_serving/tags
set tags+=/Users/kakao/git/vg_input_pipeline/tags
set tags+=/Users/kakao/git/pipelines/tags
set tags+=/Users/kakao/git/vg_input_pipeline/tags
set tags+=/Users/kakao/git/pipelines/tags
